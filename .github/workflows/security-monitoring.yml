name: Security Monitoring and Reporting

on:
  schedule:
    # Run every day at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      generate_dashboard:
        description: "Generate security dashboard"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  security_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install security tools
        run: |
          cargo install cargo-audit cargo-deny --locked || true

      - name: Run cargo audit
        id: cargo_audit
        run: |
          if command -v cargo-audit &> /dev/null; then
            cargo audit --json > cargo-audit-report.json || echo "Audit completed with findings"
          else
            echo "cargo-audit not available"
          fi

      - name: Run cargo deny
        id: cargo_deny
        run: |
          if command -v cargo-deny &> /dev/null; then
            cargo deny check --format json > cargo-deny-report.json || echo "Deny check completed with findings"
          else
            echo "cargo-deny not available"
          fi

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: |
            cargo-audit-report.json
            cargo-deny-report.json
          if-no-files-found: ignore

  compliance_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Run compliance verification
        run: |
          python scripts/generate-compliance-report.py

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            security-compliance-report.txt
            security-compliance-report.json

  security_dashboard:
    needs: [security_audit, compliance_check]
    if: ${{ github.event.inputs.generate_dashboard == 'true' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Download audit reports
        uses: actions/download-artifact@v4
        with:
          name: security-audit-reports
          path: .

      - name: Download compliance reports
        uses: actions/download-artifact@v4
        with:
          name: compliance-reports
          path: .

      - name: Generate security dashboard
        run: |
          python scripts/security-dashboard.py

      - name: Upload dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard
          path: |
            security-dashboard.html
            security-dashboard.json

      - name: Deploy dashboard (example)
        # This is a placeholder - you would deploy to your preferred hosting service
        run: |
          echo "Dashboard generated at security-dashboard.html"
          echo "In a real implementation, you would deploy this to a web server or cloud storage"

  security_alerts:
    needs: [security_audit, compliance_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download audit reports
        uses: actions/download-artifact@v4
        with:
          name: security-audit-reports
          path: .

      - name: Check for critical vulnerabilities
        id: critical_vulns
        run: |
          if [ -f "cargo-audit-report.json" ]; then
            CRITICAL_COUNT=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' cargo-audit-report.json)
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "ðŸš¨ CRITICAL VULNERABILITIES FOUND: $CRITICAL_COUNT"
              echo "See cargo-audit-report.json for details"
            fi
          else
            echo "No audit report found"
            echo "critical_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Send alert if critical vulnerabilities found
        if: ${{ steps.critical_vulns.outputs.critical_count > 0 }}
        run: |
          echo "ALERT: Critical vulnerabilities detected!"
          echo "Please review the cargo-audit-report.json for details"
          # In a real implementation, you would send notifications to Slack, email, etc.

  generate_summary:
    needs: [security_audit, compliance_check, security_dashboard, security_alerts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create summary report
        run: |
          echo "## Security Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Compliance check completed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Dashboard generated" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Alerts processed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Audit Reports](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID#artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "- [Compliance Reports](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID#artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Dashboard](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID#artifacts)" >> $GITHUB_STEP_SUMMARY