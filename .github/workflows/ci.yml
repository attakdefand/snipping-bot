name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_redis_tests:
        description: "Run integration tests requiring Redis"
        required: false
        default: "false"

env:
  RUSTUP_TOOLCHAIN: stable

jobs:
  setup-toolchain:
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.set-toolchain.outputs.rust-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain (stable) and components
        id: set-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy, llvm-tools-preview
          override: true

  security_scan:
    needs: setup-toolchain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        run: |
          cargo install cargo-audit --version 0.17.0 || true
          # if cargo-audit already present this will no-op; pin version if desired
      - name: Run cargo-audit (RustSec)
        run: |
          cargo audit --deny advisories || true
        continue-on-error: false

  fmt_clippy:
    needs: setup-toolchain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run cargo fmt (check)
        run: |
          rustup component add rustfmt || true
          cargo fmt --all -- --check
      - name: Run cargo clippy
        run: |
          rustup component add clippy || true
          cargo clippy --all-targets --all-features -- -D warnings

  build_release:
    needs: [setup-toolchain, fmt_clippy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build (release)
        run: cargo build --workspace --release

  compile_check:
    needs: [setup-toolchain]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cargo check
        run: cargo check --workspace --all-features

  integration_tests:
    needs: [setup-toolchain, build_release]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_redis_tests == 'true' || env.RUN_REDIS_TESTS == 'true' }}
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      REDIS_URL: redis://127.0.0.1:6379
    steps:
      - uses: actions/checkout@v4
      - name: Wait for Redis to be ready
        run: |
          for i in $(seq 1 20); do
            if nc -z 127.0.0.1 6379; then
              echo "redis is up"
              break
            fi
            sleep 1
          done
      - name: Run integration tests (crate-level)
        run: |
          # Restrict to the crate(s) that contain integration tests if desired:
          # cargo test -p sniper-storage -- --nocapture
          cargo test --workspace -- --nocapture

  notify_telegram:
    needs: [security_scan, fmt_clippy, build_release, compile_check, integration_tests]
    runs-on: ubuntu-latest
    if: always()
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || '' }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '' }}
    steps:
      - name: Build notification message
        id: build_msg
        run: |
          # Gather job results passed by 'needs'
          SCAN="${{ needs.security_scan.result }}"
          FORMAT="${{ needs.fmt_clippy.result }}"
          BUILD="${{ needs.build_release.result }}"
          CHECK="${{ needs.compile_check.result }}"
          INTEGRATION="${{ needs.integration_tests.result }}" || INTEGRATION="skipped"

          STATUS="success"
          for res in "$SCAN" "$FORMAT" "$BUILD" "$CHECK" "$INTEGRATION"; do
            if [ "$res" != "success" ] && [ "$res" != "skipped" ]; then
              STATUS="failure"
            fi
          done

          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="CI: ${{ github.workflow }} (#${{ github.run_number }}) â€” $STATUS\nRepository: ${{ github.repository }}\nRun: $RUN_URL\n\nResults:\n- security_scan: $SCAN\n- fmt_clippy: $FORMAT\n- build_release: $BUILD\n- compile_check: $CHECK\n- integration_tests: $INTEGRATION"

          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Telegram notification
        if: env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text=${{ steps.build_msg.outputs.message }}" \
            -H "Content-Type: application/x-www-form-urlencoded"
      - name: Print notification (fallback)
        if: env.TELEGRAM_BOT_TOKEN == '' || env.TELEGRAM_CHAT_ID == ''
        run: |
          echo "TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID not set; notification skipped."
          echo "${{ steps.build_msg.outputs.message }}"